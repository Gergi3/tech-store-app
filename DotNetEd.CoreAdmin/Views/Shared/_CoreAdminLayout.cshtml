@using DotNetEd.CoreAdmin
@using Microsoft.Extensions.Localization
@inject IEnumerable<DotNetEd.CoreAdmin.CoreAdminOptions> CoreAdminOptions
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment WebHostEnvionment
@inject IStringLocalizer<JsonLocalizer> _localizer
@{
    string assetsPath = "/_content/CoreAdmin";
    if (CoreAdminOptions.Any())
    {
        string cdnPath = CoreAdminOptions.First().CdnPath;
        if (cdnPath != null)
        {
            assetsPath = cdnPath;
        }
    }

    var options = CoreAdminOptions.FirstOrDefault();
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Page_Title"] - @options?.Title</title>

    <meta name="color-scheme" content="light dark" />

    <link rel="stylesheet" href="@assetsPath/css/bootstrap.min.css" />
    <link rel="stylesheet" href="@assetsPath/css/mvc-grid/mvc-grid.css" />
    <link rel="stylesheet" href="@assetsPath/css/mvc-grid/mvc-grid-dark.css" />
    <link rel="stylesheet" href="@assetsPath/css/easymde/easymde.css" />
    <link rel="stylesheet" href="@assetsPath/css/easymde/easymde-dark.css" />
    <link rel="stylesheet" href="@assetsPath/css/style.css" />

    <script src="@assetsPath/js/color-modes.js"></script>
</head>
<body>
    <!-- Light / Dark theme toggle -->
    @Html.Partial("~/Views/Shared/Components/ThemeToggle.cshtml")

    <!-- Navbar -->
    <nav class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap justify-content-start p-0 py-3 shadow">
        <div class="navbar-brand sidebar-width">
            <button id="sidebarToggle" class="navbar-toggler mx-2 collapsed" type="button">
                <span class="navbar-toggler-icon"></span>
            </button>
            <a class="mr-0 pl-1" href="@Url.Action("Index", "CoreAdmin")">@options?.Title</a>
        </div>
    </nav>

    <!-- Sidebar -->
    <nav id="sidebar-wrapper" class="sidebar-width d-md-block sidebar sidebar-wrapper border border-right bg-body-tertiary">
        <div class="sidebar-sticky pt-3">
            @await Component.InvokeAsync("CoreAdminMenu")
        </div>
    </nav>

    <!-- Content -->
    <div class="d-flex" id="wrapper">
        <div id="page-content-wrapper">
            <div class="container-fluid">
                <main role="main" class="px-md-4">
                    @if (WebHostEnvionment.EnvironmentName == "Development")
                    {
                        @if (CoreAdminOptions == null || !CoreAdminOptions.Any() || CoreAdminOptions.All(o => !o.IsSecuritySet))
                        {
                            <div class="alert alert-warning mt-3 mb-0" role="alert">
                                @_localizer["DevelopmentModeMessage"]
                            </div>
                        }
                    }

                    @RenderBody()
                </main>
            </div>
        </div>
    </div>

    <script src="@assetsPath/js/bootstrap.bundle.min.js"></script>
    <script src="@assetsPath/js/aspnet-validation.min.js"></script>
    <script>
        var v = new aspnetValidation.ValidationService();
        v.ValidationInputCssClassName = 'is-invalid';
        //v.ValidationInputValidCssClassName = 'is-valid';
        v.ValidationMessageCssClassName = 'invalid-feedback';
        //v.ValidationMessageValidCssClassName = 'valid-feedback';
        v.bootstrap();
    </script>
    <script src="@assetsPath/js/mvc-grid/mvc-grid.js"></script>
    <script src="@assetsPath/js/navbar.js"></script>

    @RenderSection("Scripts", required: false)
</body>
</html>
